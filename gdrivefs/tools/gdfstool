#!/usr/bin/python

import logging

from sys import exit

from fuse import FUSE, Operations, FuseOSError, c_statvfs, \
from argparse import ArgumentParser

from gdrivefs.gdfs.gdfuse import set_auth_cache_filepath, GDriveFS
from gdrivefs.gdfs.oauth_authorize import get_auth
from gdrivefs.conf import Conf

def mount(auth_storage_filepath, mountpoint, debug=None, nothreads=None, 
          option_string=None):

    fuse_opts = { }

    if option_string:
        for opt_parts in [ opt.split('=', 1) \ 
                           for opt \ 
                           in option_string.split(',') ]:
            k = opt_parts[0]

            # We need to present a bool type for on/off flags. Since all we
            # have are strings, we'll convert anything with a 'True' or 'False'
            # to a bool, or anything with just a key to True.
            if len(opt_parts) == 2:
                v = opt_parts[1]

                if v == 'True':
                    v = True
                elif v == 'False':
                    v = False
            else:
                v = True

            # We have a list of provided options. See which match against our 
            # application options.

            logging.info("Setting option [%s] to [%s]." % (k, v))

            try:
                Conf.set(k, v)
            except (KeyError) as e:
                fuse_opts[k] = v
            except:
                logging.exception("Could not set option [%s]. It is probably invalid." % (k))
                raise

    # Assume that any option that wasn't an application option is a FUSE 
    # option. The Python-FUSE interface that we're using is beautiful/elegant,
    # but there's no help support. The user is just going to have to know the
    # options.

    set_auth_cache_filepath(auth_storage_filepath)

    # How we'll appear in diskfree, mtab, etc..
    name = ("gdfs(%s)" % (auth_storage_filepath))

    fuse = FUSE(GDriveFS(), mountpoint, debug=False, foreground=debug, 
                nothreads=nothreads, fsname=name, **fuse_opts)

def load_mount_parser_args(parser):
    parser.add_argument('auth_storage_file', help='Authorization storage file')
    parser.add_argument('mountpoint', help='Mount point')
    parser.add_argument('-d', '--debug', help='Debug mode',
                        action='store_true', required=False)
    parser.add_argument('-o', '--opt', help='Mount options',
                        action='store', required=False,
                        nargs=1)

parser = ArgumentParser()

subparsers = parser.add_subparsers(help='subcommand help')
parser_auth = subparsers.add_parser('auth', help='Authorization subcommand.')

auth_xor = parser_auth.add_mutually_exclusive_group(required=True)
auth_xor.add_argument('-u', '--url', help='Get an authorization URL.', 
                      action='store_true')
auth_xor.add_argument('-a', '--auth', nargs=2,
                      metavar=('auth_storage_file', 'authcode'), 
                      help='Register an authorization-code from Google '
                      'Drive.')

mount_auth = subparsers.add_parser('mount', help='Mounting subcommand.')
load_mount_parser_args(mount_auth)

args = parser.parse_args()

# An authorization URL was requested.
if 'url' in args and args.url:
    try:
        authorize = get_auth()
        url = authorize.step1_get_auth_url()
    except Exception as e:
        print("Could not produce auth-URL: %s" % (e))
        exit()

    print("To authorize FUSE to use your Google Drive account, visit the "
          "following URL to produce an authorization code:\n\n%s\n" % 
          (url))

# An authorization from the URL needs to be submitted.
elif 'auth' in args and args.auth:
    (auth_storage_file, authcode) = args.auth

    set_auth_cache_filepath(auth_storage_file)

    try:
        authorize = get_auth()
        authorize.step2_doexchange(authcode)

    except (Exception) as e:
        message = ("Authorization failed: %s" % (str(e)))

        logging.exception(message)
        print(message)
        exit()

    print("Authorization code recorded.")

# Mount the service.
elif 'mountpoint' in args and args.mountpoint:

    option_string = args.opt[0] if args.opt else None

    try:
        mount(auth_storage_filepath=args.auth_storage_file, 
              mountpoint=args.mountpoint, debug=args.debug, 
              nothreads=args.debug, option_string=option_string)
    except (Exception) as e:
        message = ("Mount failed: %s" % (str(e)))

        logging.exception(message)
        print(message)
        exit()


